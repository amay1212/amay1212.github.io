[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Amay's blog",
    "section": "",
    "text": "Hypothesis Testing\n\n\n\n\n\n\n\nData Science\n\n\nAI\n\n\nMachine Learning\n\n\n\n\n\n\n\n\n\n\n\nMar 15, 2023\n\n\nAmay Trivedi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPartial Functions In Python\n\n\n\n\n\n\n\nPython\n\n\nMachine Learning\n\n\nDesign Patterns\n\n\n\n\nfunctool Partial Functions\n\n\n\n\n\n\nMay 31, 2022\n\n\nAmay Trivedi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2022-05-31-partial-functions.html",
    "href": "posts/2022-05-31-partial-functions.html",
    "title": "Partial Functions In Python",
    "section": "",
    "text": "from typing import Callable\ndef add(a: float, b: float) -> float:\n    return (a+b)\n\n\ndef make_adder(a: float) -> Callable[[float], float]:\n    def add_inner(b: float) -> float:\n        return add(a, b)\n    return add_inner\n\n\nadd_num = make_adder(2)\n\n\nadd_num(2)\n\n4\n\n\n\n# Optimising further our code..\ndef make_adder(a: float) -> Callable[[float], float]:\n    return lambda b: add(a, b)\n\n\nadd_num = make_adder(20)\n\n\nadd_num(34)\n\n54\n\n\nThe working is as follows:\n\nWe defined the add function, which is not exposed directly and is wrapped inside make_adder function, which we want to be a public function.\nWe are passing a partial argument here of type float, in this case we named it “a”.\nWe then defined an inner function add_inner function which is another function takes parameter of type float again as “b”.\nNow coming to the function calling part.\n\n\nadd_num = make_adder(2) -> STEP 1\nReturns us the inner function object, note it is not yet called.\n\nadd_num(4) -> Output : 6 -> STEP 2\n\nWhy?\nThe logic is more like make_adder says Hey! I will take a partial parameter and keep a track of it.*\nTherefore, STEP 1 gives us just the object of inner function while still storing the parameter “a”.\n\nIn STEP 2, similar thing follows:\nNow, so far we just have the variable add_num from STEP 1, which stores the inner function add_inner.\n\nWe definitely need a float output, enough with the Christopher Nolan’s Inception thing.\nadd_num(4) -> This simply means call the inner function which takes another partial argument as “b” and calls the magical method add JK :D(not so magical). This is more like a concept of partial functions implemented in functools with additional usages..\n\n# Implementing what is already implemented...\nfrom functools import partial\n\n# Let's again define add function. Just for explanation purpose..\ndef add(a: float, b: float):\n    return (a+b)\n\nadd_num = partial(add, 6)\n\n\nadd_num(11)\n\n17\n\n\nVoila!\n\n\nReusability With Partial Functions\nBelow code snippets define some basic code reusability in terms of model building combined with partial functionality\nThe two aspect it covers:-\n\nWe first pass only the partial parameter to the partial function i.e “model_name” in our example.\nWe then pass in multiple datasets to run our model onto which gets executed much faster…\n\n\ndef learner_partial(model, dataset):\n    print(f'Model learn {model=},  {dataset=}')\n    return \"Model\"\n\n\ngenerate_model = partial(learner_partial, \"models.resnet34\")\n\n\n# pass the arguments, only pass the remaining arguments\ngenerate_model(\"d1\")\ngenerate_model(\"d2\")\n\nModel learn model='models.resnet34',  dataset='d1'\nModel learn model='models.resnet34',  dataset='d2'\n\n\n'Model'\n\n\n\ngenerate_model = partial(learner_partial, model = \"models.resnet18\")\n\n\ngenerate_model(dataset = \"d3\")\n\nModel learn model='models.resnet18',  dataset='d3'\n\n\n'Model'\n\n\n\ngenerate_model = partial(learner_partial, dataset = \"d4\")\n\n\ngenerate_model(\"m4\")\n\nModel learn model='m4',  dataset='d4'\n\n\n'Model'\n\n\n\nFinal Thoughts\nPython Standard Library has great tools for your disposal. The functools module has great ways to make your code cleaner, simpler, and sometimes even faster!"
  },
  {
    "objectID": "posts/2023-03-15-sample-pvalues-importance.html",
    "href": "posts/2023-03-15-sample-pvalues-importance.html",
    "title": "Amay's blog",
    "section": "",
    "text": "Alt text"
  },
  {
    "objectID": "posts/2023-03-15-sample-pvalues-importance.html#solution-process-starts-from-here",
    "href": "posts/2023-03-15-sample-pvalues-importance.html#solution-process-starts-from-here",
    "title": "Amay's blog",
    "section": "Solution Process starts from here",
    "text": "Solution Process starts from here\n\ndf= data.copy()\n\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      exp\n      salary\n      gender\n    \n  \n  \n    \n      0\n      2.0\n      350000\n      F\n    \n    \n      1\n      2.0\n      360000\n      M\n    \n    \n      2\n      4.0\n      400000\n      F\n    \n    \n      3\n      4.0\n      900000\n      M\n    \n    \n      4\n      5.6\n      450000\n      F\n    \n  \n\n\n\n\nPlotting the experience and salary and checking data distribution\n\nBasic EDA\n\ndef plot_distribution_scatter(df, x, y, hue=None):\n    sns.scatterplot(data=df, x=x, y=y,hue=hue)\n\n\nplot_distribution_scatter(df, df.exp, df.salary, df.gender)\n\n\n\n\n\nPlotting only Gender and Salary, so as to confirm with our P-value later on\n\nsns.boxplot(x = 'gender', y = df.salary, data=df)\nplt.ticklabel_format(style='plain', axis='y')\n\n\n\n\nSeems like salaries of males are greater than female’s\n\n# Checking the difference between the salaries..\n#df.head()\ngrouped_by_gender = df.groupby('gender')\ngrouped_by_gender['salary'].describe()\n\n\n\n\n\n  \n    \n      \n      count\n      mean\n      std\n      min\n      25%\n      50%\n      75%\n      max\n    \n    \n      gender\n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      F\n      20.0\n      958750.0\n      1.076212e+06\n      100000.0\n      400000.0\n      600000.0\n      1025000.0\n      5000000.0\n    \n    \n      M\n      20.0\n      1478500.0\n      1.406351e+06\n      130000.0\n      712500.0\n      985000.0\n      2150000.0\n      6500000.0\n    \n  \n\n\n\n\n\nmale_salary = grouped_by_gender['salary'].mean()[1]\nfemale_salary = grouped_by_gender['salary'].mean()[0]\ndifference = male_salary - female_salary\nprint(f'Difference in salaries = {difference}')\n\nDifference in salaries = 519750.0\n\n\n\n\nSeparating out the independent and dependent variable\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      exp\n      salary\n      gender\n    \n  \n  \n    \n      0\n      2.0\n      350000\n      F\n    \n    \n      1\n      2.0\n      360000\n      M\n    \n    \n      2\n      4.0\n      400000\n      F\n    \n    \n      3\n      4.0\n      900000\n      M\n    \n    \n      4\n      5.6\n      450000\n      F\n    \n  \n\n\n\n\n\nx1 = df.iloc[:, [0,2]]\ny = df.iloc[:, 1]\n\n\ny.head()\n\n0    350000\n1    360000\n2    400000\n3    900000\n4    450000\nName: salary, dtype: int64\n\n\n\nx1.head()\n\n\n\n\n\n  \n    \n      \n      exp\n      gender\n    \n  \n  \n    \n      0\n      2.0\n      F\n    \n    \n      1\n      2.0\n      M\n    \n    \n      2\n      4.0\n      F\n    \n    \n      3\n      4.0\n      M\n    \n    \n      4\n      5.6\n      F\n    \n  \n\n\n\n\n\n\nAdding constant to x1 data as per stats models library\n\nX = sm.add_constant(x1)\n\n\nX.head()\n\n\n\n\n\n  \n    \n      \n      const\n      exp\n      gender\n    \n  \n  \n    \n      0\n      1.0\n      2.0\n      F\n    \n    \n      1\n      1.0\n      2.0\n      M\n    \n    \n      2\n      1.0\n      4.0\n      F\n    \n    \n      3\n      1.0\n      4.0\n      M\n    \n    \n      4\n      1.0\n      5.6\n      F\n    \n  \n\n\n\n\n\n\nConverting ‘gender’ column to dummy variables\n\nX.head()\n\n\n\n\n\n  \n    \n      \n      const\n      exp\n      gender\n    \n  \n  \n    \n      0\n      1.0\n      2.0\n      F\n    \n    \n      1\n      1.0\n      2.0\n      M\n    \n    \n      2\n      1.0\n      4.0\n      F\n    \n    \n      3\n      1.0\n      4.0\n      M\n    \n    \n      4\n      1.0\n      5.6\n      F\n    \n  \n\n\n\n\n\n# This will first convert the gender into one hot encoded form for ex:\n# 0 for male, 1 for female\n# After that, it will sort the desired new columns in alphabetical order\n# drop_first=True, Female gender dummy variable will be dropped as it 'F' in Female comes before 'M' in Male\nX = pd.get_dummies(X, drop_first=True)\n\n\nX.head()\n\n\n\n\n\n  \n    \n      \n      const\n      exp\n      gender_M\n    \n  \n  \n    \n      0\n      1.0\n      2.0\n      0\n    \n    \n      1\n      1.0\n      2.0\n      1\n    \n    \n      2\n      1.0\n      4.0\n      0\n    \n    \n      3\n      1.0\n      4.0\n      1\n    \n    \n      4\n      1.0\n      5.6\n      0\n    \n  \n\n\n\n\n\n\nFitting the stats model (OLS)\n\nmodel = sm.OLS(endog=y, exog=X).fit()\n\n\n#model=sm.OLS(y,X).fit()\n\n\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:         salary        R-squared:             0.735\n\n\n  Model:                   OLS         Adj. R-squared:        0.720\n\n\n  Method:             Least Squares    F-statistic:           51.24\n\n\n  Date:             Wed, 15 Mar 2023   Prob (F-statistic): 2.18e-11\n\n\n  Time:                 08:48:37       Log-Likelihood:      -591.70\n\n\n  No. Observations:          40        AIC:                   1189.\n\n\n  Df Residuals:              37        BIC:                   1194.\n\n\n  Df Model:                   2                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n              coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  const    -8.895e+05   2.4e+05    -3.701  0.001 -1.38e+06 -4.03e+05\n\n\n  exp       2.269e+05  2.31e+04     9.819  0.000   1.8e+05  2.74e+05\n\n\n  gender_M  5.084e+05  2.11e+05     2.406  0.021  8.02e+04  9.37e+05\n\n\n\n\n  Omnibus:       14.748   Durbin-Watson:         1.215\n\n\n  Prob(Omnibus):  0.001   Jarque-Bera (JB):     21.336\n\n\n  Skew:           1.015   Prob(JB):           2.33e-05\n\n\n  Kurtosis:       5.946   Cond. No.               24.3\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\nThe above says P values in dummy variable is less then 0.05 so it is signifincant. The way it is interpreted as the salary of males is 5.084e+05 (508400) more than female given the experence is same\n\n\nFollowing are the Hypothesis for each of our variables..\nFeature - Experience\n\nNull Hypothesis: There is no change in salary with change in experience\nAlternate Hypothesis: There is strong linear relationship between experience and salary\nP-value Analysis: The P-value comes out to be 0.000, which is less than our significance level 0.05. Hence, this proves that there is a strong relationship between exp and salary which was also concluded by our EDA scatter plot analyis above.\n\nConclusion: We can reject null hypothesis with evidence. Therefore, exp is strong indicator for predicting our salary.\n\ncap.show()\n\n\n\n\n\n\nFollowing are the Hypothesis for each of our variables..\nFeature - Gender_M (categorical feature with 0 and 1 value)\n\n(H0) Null Hypothesis: The gender does not have any impact on salary\n(Ha) Alternate Hypothesis: There is a strong relationship between gender and salary.\n\nThe above two hypothesis have another nested hypothesis, which gets finer information about Male and Female salary in particular. Let’s name it H01 and Ha01\n\nH01 * - Whether it is a male or female, the salary is not gonna get impacted by gender.\nHa01 - The salary is gonna be different for males and females.\nP-value Analysis: The P-value comes out to be 0.021 from the plot above, which is less than our significance level 0.05. Hence, this proves that there is a strong relationship between gender_M(Male Gender) and salary which was also concluded by our EDA scatter plot analyis above.\n\nConclusion: We can reject null hypothesis with evidence that\n\nSalaries are affected by gender\nThere would be a difference in salaries for male and female.\n\n\n\nDry run of our linear regression model\n\nexp = 15\ngender_M = 0 #(female)\n\n\n# forming equation by rounding off some numbers..\nfemale_salary = 2*exp + 5*gender_M - 8.8\n\ngender_M = 1 #(male)\n\nmale_salary = 2*exp + 5*gender_M - 8.8\n\n\nfemale_salary, male_salary\n\n(21.2, 26.2)\n\n\n\n\nConclusion:\nDifference of 5 units is observed in Male’s salary and Female’s salary."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]